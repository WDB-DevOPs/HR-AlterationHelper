/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MainForm;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import javax.swing.ImageIcon;
import org.json.JSONObject;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.System.Logger;
import java.lang.System.Logger.Level;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.zip.Deflater;
import java.util.zip.DeflaterOutputStream;

/**
 *
 * @author 211608
 */
public class RemarksFrame extends javax.swing.JFrame {

    /**
     * Creates new form RemarksFrame
     */
    public String fileName;
    public String att;
    public String oID;
    public String id2;
    public String lastName;
    ImageIcon mg= new ImageIcon();
    public String previousFname;
    
    public RemarksFrame(String attach,String objid,String id200,String lName, ImageIcon img, String filn) {
        initComponents();
        
        fileName=lName+id200;
        oID=objid;
        mg= img;
        previousFname=filn;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setText("Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(27, 27, 27)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    public static byte[] compress(byte[] input) throws IOException {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try (DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(outputStream, new Deflater())) {
            deflaterOutputStream.write(input);
        }
        return outputStream.toByteArray();
    }
    
    public static String compressBase64(String base64String) throws IOException{
        // Decode Base64 string into byte array
        byte[] decodedBytes = Base64.getDecoder().decode(base64String);

        // Compress the byte array
        byte[] compressedBytes = compress(decodedBytes);

        // Encode the compressed byte array back to Base64
        return Base64.getEncoder().encodeToString(compressedBytes);
    }
    
    private static BufferedImage toBufferedImage(Image img) {
        BufferedImage bufferedImage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);

        // Create a graphics object from the buffered image
        Graphics g = bufferedImage.getGraphics();

        // Draw the image on to the buffered image
        g.drawImage(img, 0, 0, null);
        g.dispose();

        return bufferedImage;
    }
    
    public static String imageIconToBase64(ImageIcon imageIcon) {
        // Step 1: Convert ImageIcon to BufferedImage
        Image image = imageIcon.getImage();
        BufferedImage bufferedImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
        bufferedImage.getGraphics().drawImage(image, 0, 0, null);

        // Step 2: Convert BufferedImage to byte array
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        try {
            javax.imageio.ImageIO.write(bufferedImage, "png", byteArrayOutputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
        byte[] imageBytes = byteArrayOutputStream.toByteArray();

        // Step 3: Encode byte array as Base64 string
        return Base64.getEncoder().encodeToString(imageBytes);
    }

    public static String imageToBase64(String imagePath) {
        try {
            // Read the image file into a byte array
            File imageFile = new File(imagePath);
            byte[] imageBytes = Files.readAllBytes(imageFile.toPath());

            // Encode the byte array to Base64
            return Base64.getEncoder().encodeToString(imageBytes);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
    public static String compressBase64s(String base64String) throws IOException {
        // Decode Base64 string into byte array
        byte[] decodedBytes = Base64.getDecoder().decode(base64String);

        // Compress the byte array
        byte[] compressedBytes = compress(decodedBytes);

        // Encode the compressed byte array back to Base64
        return Base64.getEncoder().encodeToString(compressedBytes);
    }   
    
    private static String getImageType(Path imagePath) {
        // Extract the file extension (e.g., "png")
        String fileName = imagePath.getFileName().toString();
        int dotIndex = fileName.lastIndexOf('.');
        if (dotIndex > 0 && dotIndex < fileName.length() - 1) {
            return fileName.substring(dotIndex + 1).toLowerCase();
        } else {
            return "unknown";
        }
    }
     
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
        // TODO add your handling code here: Submit button 
            HTTPs connector= new HTTPs();
            JSONObject reqbod=new JSONObject();
            
            String textData = "Your text data";
            String pather= "C:\\Users\\Public\\Downloads\\upload.jpg";
            //File imageFile = new File("C:\\Users\\Public\\Downloads\\upload.jpg");
            //String resp;
            String base64String = imageIconToBase64(mg);
            Path path = Paths.get(pather);
            String imageType = getImageType(path);
            
            String theFinalCountdown="data:image/" + imageType + ";base64," + base64String;
            
            if (base64String != null) {
                //System.out.println("Base64 String: " + base64String);
                //String compressedBase64String = compressBase64s(base64String);
                //System.out.println(compressedBase64String);
                reqbod.put("textData", textData);
                reqbod.put("base64",theFinalCountdown);
                reqbod.put("filename", fileName+"."+imageType);
                reqbod.put("objid",oID); 
                
                String reqbodString= reqbod.toString();
                System.out.println(reqbodString);
                
                String APIUrl=  "http://10.86.0.84:6060/reUploadAttachment";
                String response=connector.sendData(APIUrl,reqbodString); 
                
                
                String finality=response.replaceAll("\\[", "").replaceAll("\\]","");
                JSONObject jsons;
                jsons = new JSONObject(finality);
                System.out.println(jsons);
                
            } else {
                System.out.println("Failed to convert image to Base64.");
            }
            
           
            
        }catch(Exception e){
            e.printStackTrace();
        }
//            
//        
//            //System.out.println(base64String);
//            reqbod.put("filename", fileName);
//            reqbod.put("objid",oID); 
//            //reqbod.put("bx64",base64String);
//            String reqbodString= reqbod.toString();
//            //System.out.println(reqbodString);
//            String  url= "http://10.86.0.84:6060/reUploadAttachment";
//            String response=connector.ReUplaod(url,reqbodString); 
//            
//            String finality=response.replaceAll("\\[", "").replaceAll("\\]","");
//            JSONObject jsons;
//            jsons = new JSONObject(finality);
//            System.out.println(jsons);
//            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
//            connection.setRequestMethod("POST");
//            connection.setDoOutput(true);
//
//            // Set the content type for JSON
//            connection.setRequestProperty("Content-Type", "application/json");
//
//            Image image = mg.getImage();
//            BufferedImage bufferedImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
//            Graphics g = bufferedImage.createGraphics();
//            g.drawImage(image, 0, 0, null);
//            g.dispose();
//      
//            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
//            ImageIO.write(bufferedImage, "png", byteArrayOutputStream);
//            byte[] imageData = byteArrayOutputStream.toByteArray();
//            String base64Image = Base64.getEncoder().encodeToString(imageData);
//
//             // Construct JSON payload with base64 image
//            String jsonPayload = "{\"image\":\"" + base64Image + "\"}";
//
//            // Write the JSON data to the output stream
//            try (OutputStream outputStream = connection.getOutputStream()) {
//                outputStream.write(jsonPayload.getBytes());
//            }
//
//            // Check the response code if needed
//            int responseCode = connection.getResponseCode();
//            System.out.println("Response Code: " + responseCode);
    }//GEN-LAST:event_jButton2ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RemarksFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RemarksFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RemarksFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RemarksFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new RemarksFrame("defaultAttach", "defaultObjid", "defaultId200", "defaultLName", null, "defaultFilename").setVisible(true);

               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
